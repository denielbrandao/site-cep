import { config } from "dotenv";
config();

import OpenAI from "openai";
import fetch from "node-fetch";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export default async function handler(req, res) {
  const { jogo } = req.query;

  if (!jogo) {
    return res.status(400).json({ erro: "Nome do jogo n칚o informado" });
  }

  const serpResponse = await fetch(`https://serpapi.com/search.json?q=${encodeURIComponent(jogo)}&engine=google&api_key=${process.env.SERPAPI_KEY}`);
  const serpJson = await serpResponse.json();

  const contexto = serpJson.organic_results?.map(r => r.snippet).join("\n").slice(0, 1000) || "";
  const imagem = serpJson.images_results?.[0]?.thumbnail || serpJson.organic_results?.[0]?.thumbnail || "";

  const prompt = `
Voc칡 칠 uma IA treinada para avaliar jogos segundo os crit칠rios do grupo "Cornos & Perigosos".
Analise o jogo "${jogo}" com base nas informa칞칫es abaixo e retorne o resultado estritamente no seguinte formato JSON:

{
  "nome": "",
  "players": "",
  "valido": "",
  "earlyAccess": "",
  "crossplay": "",
  "ptbr": "",
  "geforcenow": "",
  "imagem": ""
}

丘멆잺 IMPORTANTE:
- Campo "earlyAccess":
  - Se o jogo j치 foi lan칞ado em sua vers칚o completa (Full Release), retorne: 游릭 Lan칞ado
  - Se o jogo est치 em acesso antecipado (Early Access), ainda n칚o foi lan칞ado ou est치 apenas anunciado, retorne: 游리 N칚o lan칞ado

- Use SOMENTE as informa칞칫es do contexto real abaixo (copiado da internet). N칚o invente.
- Se algo n칚o estiver no contexto, retorne como "游리 Informa칞칚o n칚o confirmada".

Regras:
- Players: "游릭 Aprovado para 4+", "游리 Poss칤vel sem o Augusto", "游댮 Apenas 1-2 jogadores"
- V치lido: 游릭, 游리 ou 游댮 (veredicto final baseado na soma dos crit칠rios)
- Early Access: 游릭 Lan칞ado, 游리 N칚o lan칞ado
- Crossplay: 游릭, 游댮 ou 游리 (PS5 apenas)
- PT-BR: 游릭 Tem PT-BR, 游리 Sem PT-BR
- GeForce NOW: 游릭, 游댮 ou 游리
- Imagem: deixe o campo imagem em branco (ser치 preenchido automaticamente no backend)

Contexto real retirado da web:
${contexto}
`;

  const completion = await openai.chat.completions.create({
    model: "gpt-4",
    messages: [{ role: "user", content: prompt }]
  });

  const resposta = completion.choices[0]?.message?.content;

  try {
    const json = JSON.parse(resposta);
    res.status(200).json({
      ...json,
      imagem,
      debug: {
        contexto,
        respostaBruta: resposta
      }
    });
  } catch (err) {
    res.status(500).json({
      erro: "Erro ao processar JSON da IA",
      respostaBruta: resposta,
      contexto
    });
  }
}